name: deploy

# =========================
# Ï†ÑÏó≠ ÌôòÍ≤ΩÎ≥ÄÏàò
# =========================
env:
  IMAGE_REPOSITORY: achievement-stamp         # GHCR Ïù¥ÎØ∏ÏßÄ Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î™Ö
  CONTAINER_1_NAME: achievement-stamp_1       # Ïä¨Î°Ø1
  CONTAINER_2_NAME: achievement-stamp_2       # Ïä¨Î°Ø2
  CONTAINER_PORT: 8080                        # Ïª®ÌÖåÏù¥ÎÑà ÎÇ¥Î∂Ä Ìè¨Ìä∏
  EC2_INSTANCE_TAG_NAME: terra-ec2-1          # EC2 Name ÌÉúÍ∑∏
  DOCKER_NETWORK: common                      # ÎèÑÏª§ ÎÑ§Ìä∏ÏõåÌÅ¨
  BACKEND_DIR: backend                        # Dockerfile ÏúÑÏπò

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/**"
      - "backend/.env"
      - "backend/src/**"
      - "backend/build.gradle.kts"
      - "backend/settings.gradle.kts"
      - "backend/Dockerfile"

# Í∂åÌïú
permissions:
  contents: write    # ÌÉúÍ∑∏/Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±
  packages: write    # GHCR Ìë∏Ïãú

defaults:
  run:
    shell: bash

jobs:
  # ---------------------------------------------------------
  # 1) ÌÉúÍ∑∏/Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±
  # ---------------------------------------------------------
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  # ---------------------------------------------------------
  # 2) ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìú/Ìë∏Ïãú (Ï∫êÏãú ÏµúÎåÄ ÌôúÏö©)
  # ---------------------------------------------------------
  buildImageAndPush:
    name: Build & Push to GHCR
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ÎπåÎìú Ï∫êÏãú ÏïàÏ†ïÌôîÎ•º ÏúÑÌï¥ .envÎ•º Ìï≠ÏÉÅ ÏÉùÏÑ±
      - name: Create .env for build context (optional)
        env:
          DOT_ENV: ${{ secrets.DOT_ENV }}
        run: |
          mkdir -p "${{ env.BACKEND_DIR }}"
          printf "%s" "${DOT_ENV}" > "${{ env.BACKEND_DIR }}/.env" || true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lower-case owner
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BACKEND_DIR }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_REPOSITORY }}:${{ needs.makeTagAndRelease.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_REPOSITORY }}:latest
          build-args: |
            SKIP_TESTS=true

  # ---------------------------------------------------------
  # 3) Blue/Green Î¨¥Ï§ëÎã® Î∞∞Ìè¨ (EC2 + NPM Ïä§ÏúÑÏπò)
  #    - NPM_ADMIN_PASSWORD / APP_DOMAIN (ÏãúÌÅ¨Î¶ø) ÏÇ¨Ïö©
  #    - DOT_ENVÎ•º EC2Ïóê Ï†ÄÏû• ÌõÑ --env-fileÎ°ú Ï£ºÏûÖ
  # ---------------------------------------------------------
  deploy:
    name: Blue/Green Deploy
    runs-on: ubuntu-latest
    needs: [makeTagAndRelease, buildImageAndPush]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Find EC2 by Name tag
        id: get_instance_id
        run: |
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_TAG_NAME }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          [[ -n "$IID" && "$IID" != "None" ]] || { echo "No running instance found by Name tag"; exit 1; }
          echo "INSTANCE_ID=$IID" >> $GITHUB_ENV

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        env:
          # Secrets Î∞è Ïª®ÌÖçÏä§Ìä∏Î•º ENVÎ°ú Ïò¨Î¶º
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
          NPM_ADMIN_PASSWORD: ${{ secrets.NPM_ADMIN_PASSWORD }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          OWNER_LC: ${{ github.repository_owner }}
          IMAGE_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
          IMAGE_TAG: ${{ needs.makeTagAndRelease.outputs.tag_name }}
          CONTAINER_1_NAME: ${{ env.CONTAINER_1_NAME }}
          CONTAINER_2_NAME: ${{ env.CONTAINER_2_NAME }}
          CONTAINER_PORT: ${{ env.CONTAINER_PORT }}
          DOCKER_NETWORK: ${{ env.DOCKER_NETWORK }}
          DOT_ENV: ${{ secrets.DOT_ENV }}
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Blue/Green switch with NPM
          command: |
            set -Eeuo pipefail

            LOG="/tmp/ssm-$(date +%Y%m%d_%H%M%S).log"
            exec > >(awk '{ fflush(); print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }' | tee -a "$LOG")
            exec 2> >(awk '{ fflush(); print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }' | tee -a "$LOG" >&2)

            command -v jq >/dev/null 2>&1 || (dnf -y install jq || yum -y install jq || true)

            # ====== ÌïÑÏàò Î≥ÄÏàò ÏÑ∏ÌåÖ (ENVÏóêÏÑú ÏùΩÍ∏∞) ======
            export PASSWORD_1="${NPM_ADMIN_PASSWORD}"   # NPM Í¥ÄÎ¶¨Ïûê ÎπÑÎ≤à
            export APP_1_DOMAIN="${APP_DOMAIN}"         # Ïòà: api.stamppop.shop

            OWNER_LC="${OWNER_LC,,}"
            IMAGE="ghcr.io/${OWNER_LC}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
            SLOT1="${CONTAINER_1_NAME}"
            SLOT2="${CONTAINER_2_NAME}"
            PORT_IN="${CONTAINER_PORT}"
            NET="${DOCKER_NETWORK}"

            echo "üîπ Use image: ${IMAGE}"
            if [ -n "${GHCR_PAT:-}" ] && [ "${GHCR_PAT}" != "null" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${OWNER_LC}" --password-stdin
            fi
            docker pull "${IMAGE}"

            # Îü∞ÌÉÄÏûÑ ÌôòÍ≤ΩÌååÏùº Ï†ÄÏû• (DOT_ENV)
            install -d -m 700 /opt/app/env
            printf "%s" "${DOT_ENV}" > /opt/app/env/backend.env
            chmod 600 /opt/app/env/backend.env

            # NPM ÌÜ†ÌÅ∞ Î∞úÍ∏â
            TOKEN=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
              -H "Content-Type: application/json" \
              -d "{\"identity\": \"admin@npm.com\", \"secret\": \"${PASSWORD_1}\"}" | jq -r '.token')
            [[ -n "${TOKEN}" && "${TOKEN}" != "null" ]] || { echo "NPM token issue failed"; exit 1; }
            [[ -n "${APP_1_DOMAIN:-}" ]] || { echo "APP_1_DOMAIN is empty"; exit 1; }

            # ÌîÑÎ°ùÏãú Ìò∏Ïä§Ìä∏ ID Ï°∞Ìöå
            PROXY_ID=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer ${TOKEN}" \
              | jq ".[] | select(.domain_names[]==\"${APP_1_DOMAIN}\") | .id")
            [[ -n "${PROXY_ID}" && "${PROXY_ID}" != "null" ]] || { echo "Proxy host not found for ${APP_1_DOMAIN}"; exit 1; }

            # ÌòÑÏû¨ forward_host ÌôïÏù∏
            CURRENT_HOST=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts/${PROXY_ID}" \
              -H "Authorization: Bearer ${TOKEN}" | jq -r '.forward_host')
            echo "üîé CURRENT_HOST: ${CURRENT_HOST:-none}"

            if [[ "${CURRENT_HOST:-}" == "${SLOT1}" ]]; then
              BLUE="${SLOT1}"; GREEN="${SLOT2}"
            elif [[ "${CURRENT_HOST:-}" == "${SLOT2}" ]]; then
              BLUE="${SLOT2}"; GREEN="${SLOT1}"
            else
              BLUE="none"; GREEN="${SLOT1}"   # ÏµúÏ¥à Î∞∞Ìè¨
            fi
            echo "üé® role -> blue(now): ${BLUE}, green(next): ${GREEN}"

            # green Ïª®ÌÖåÏù¥ÎÑà ÍµêÏ≤¥
            docker rm -f "${GREEN}" >/dev/null 2>&1 || true
            echo "üöÄ run new container ‚Üí ${GREEN}"
            docker run -d --name "${GREEN}" \
              --restart unless-stopped \
              --network "${NET}" \
              --env-file /opt/app/env/backend.env \
              -e TZ=Asia/Seoul \
              "${IMAGE}"

            # Ìó¨Ïä§Ï≤¥ÌÅ¨: /actuator/health -> /ping -> /
            echo "‚è± health-check: ${GREEN}"
            TIMEOUT=180
            INTERVAL=4
            ELAPSED=0
            sleep 8
            CODE=000
            while (( ELAPSED < TIMEOUT )); do
              for P in /actuator/health /ping / ; do
                CODE=$(docker exec "${GREEN}" curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:${PORT_IN}${P}" || echo 000)
                [[ "${CODE}" == "200" ]] && break 2
              done
              sleep "${INTERVAL}"
              ELAPSED=$((ELAPSED + INTERVAL))
            done
            [[ "${CODE:-000}" == "200" ]] || { echo "‚ùå ${GREEN} health failed"; docker logs --tail=200 "${GREEN}" || true; docker rm -f "${GREEN}" || true; exit 1; }
            echo "‚úÖ ${GREEN} healthy"

            # NPM ÏóÖÏä§Ìä∏Î¶º Ï†ÑÌôò
            NEW_CFG=$(jq -n --arg host "${GREEN}" --argjson port ${PORT_IN} '{forward_host:$host, forward_port:$port}')
            curl -s -X PUT "http://127.0.0.1:81/api/nginx/proxy-hosts/${PROXY_ID}" \
              -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -d "${NEW_CFG}" >/dev/null
            echo "üîÅ switch upstream ‚Üí ${GREEN}:${PORT_IN}"

            # Ïù¥Ï†Ñ blue Ï¢ÖÎ£å
            if [[ "${BLUE}" != "none" ]]; then
              docker stop "${BLUE}" >/dev/null 2>&1 || true
              docker rm   "${BLUE}" >/dev/null 2>&1 || true
              echo "üßπ removed old blue: ${BLUE}"
            fi

            # Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
            {
              docker images --format '{{.Repository}}:{{.Tag}}' \
                | grep -F "ghcr.io/${OWNER_LC}/${IMAGE_REPOSITORY}:" \
                | grep -v -F ":${IMAGE_TAG}" \
                | grep -v -F ":latest" \
                | xargs -r docker rmi
              docker image prune -f
            } || true

            echo "üèÅ Blue/Green switch complete. now blue = ${GREEN}"
